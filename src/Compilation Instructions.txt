Compiling instructions:

In order to compile this you need:  Arduino Libraries, ArduinoOTA (included in ESP32), SmallRTC (2.4.2 or greater, GuruSR), SmallNTP (GuruSR), StableBMA (GuruSR), Olson2POSIX (GuruSR) AND Watchy (1.4.7 or greater) base.  For the SmallNTP, StableBMA and Olson2POSIX repositories, click on the Release (right of page) and click the Source code.zip (master.zip), name it as the library you're downloading (keep the .zip), then using Arduino's Library Manager you can in the Sketch Menu -> Include Library -> Add .Zip Library and pick the downloaded library to add.

**WATCH V3.0 (2024) OWNERS READ THIS!**

First off, I do *NOT* have a testing platform, you're compiling this at your own risk (there won't be any damage to your device).  But in order to actually compile the binary for this new V3, you need to have ESP32 3.0.2+ and ESP-IDF installed (manually) and can be found here at this link:  https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/#manual-installation

**MUST READ**

Watchy GSR offers OTA, in order for that to work, your compile setup should have the partitions set for MIN_SPIFFS, not anything else, it will compile with HUGE but no OTA will be offered.

**VERSION 1.4.7F CHANGES**

V3:  There is a new version V3, which as of writing, I do not have, but I have partial information and have made hopefully the necessary changes to get this to compile for it.  Double check the Compile Settings if using Arduino, a platformioV3.ini has to be renamed to platformio.ini before you compile, sadly, there isn't any easy way to do this with that software.

**VERSION 1.4.3+ CHANGES**

Go into the Watchy library folder and move the following files out of it, otherwise it may not compile as these files are out of date:

Safely ignore any errors from WatchyRTC (it isn't used).  Safely ignore the PCF8563/DS3232RTC warning(s).

**VERSION 1.4.1 CHANGES**

Requires Watchy base 1.4.1 or greater, as well as the above libraries.  When editing the file changes below, DO NOT COPY items that say not to, instead make the changes or copy in the changes to avoid compiler errors.

You'll need to edit 2 files:

**NOTE** The two files can be found in Arduino->Libraries->GxEPD2->src->epd (for PlatformIO, you'll need to look where it is stored for your setup).

GxEPD2_154_D67.cpp:

Copy the code below:

bool IsDark;                                    // GuruSR:  Changed for setDarkBorder
void GxEPD2_154_D67::setDarkBorder(bool Dark){  // GuruSR:  Changed for setDarkBorder
	IsDark=Dark;                                  // GuruSR:  Changed for setDarkBorder
}                                               // GuruSR:  Changed for setDarkBorder

And add it to just under this code:  (Note, the uint8/16_t's below can either be uint8_t or uint16_t based on GxEPD2 version, don't copy those lines.)

GxEPD2_154_D67::GxEPD2_154_D67(int8/16_t cs, int8/16_t dc, int8/16_t rst, int8/16_t busy) :
  GxEPD2_EPD(cs, dc, rst, busy, HIGH, 10000000, WIDTH, HEIGHT, panel, hasColor, hasPartialUpdate, hasFastPartialUpdate)
{
}

So when you're done, it looks like this:

GxEPD2_154_D67::GxEPD2_154_D67(int8/16_t cs, int8/16_t dc, int8/16_t rst, int8/16_t busy) :
  GxEPD2_EPD(cs, dc, rst, busy, HIGH, 10000000, WIDTH, HEIGHT, panel, hasColor, hasPartialUpdate, hasFastPartialUpdate)
{
}

bool IsDark;                                    // GuruSR:  Changed for setDarkBorder
void GxEPD2_154_D67::setDarkBorder(bool Dark){  // GuruSR:  Changed for setDarkBorder
	IsDark=Dark;                                  // GuruSR:  Changed for setDarkBorder
}                                               // GuruSR:  Changed for setDarkBorder


Change the code in _InitDisplay from:

void GxEPD2_154_D67::_InitDisplay()
{
  if (_hibernating) _reset();
  delay(10); // 10ms according to specs
  _writeCommand(0x12); // soft reset
  delay(10); // 10ms according to specs
  _writeCommand(0x01); // Driver output control
  _writeData(0xC7);
  _writeData(0x00);
  _writeData(0x00);
  _writeCommand(0x3C); // BorderWavefrom
  _writeData(0x05);      <- THIS LINE NEEDS TO BE CHANGED, LOOK BELOW!
  _writeCommand(0x18); // Read built-in temperature sensor
  _writeData(0x80);
  _setPartialRamArea(0, 0, WIDTH, HEIGHT);
}

to:

void GxEPD2_154_D67::_InitDisplay()
{
  if (_hibernating) _reset();                               <- DO NOT COPY THIS
  delay(10); // 10ms according to specs                     <- DO NOT COPY THIS
  _writeCommand(0x12); // soft reset                        <- DO NOT COPY THIS
  delay(10); // 10ms according to specs                     <- DO NOT COPY THIS
  _writeCommand(0x01); // Driver output control             <- DO NOT COPY THIS
  _writeData(0xC7);                                         <- DO NOT COPY THIS
  _writeData(0x00);                                         <- DO NOT COPY THIS
  _writeData(0x00);                                         <- DO NOT COPY THIS
  _writeCommand(0x3C); // BorderWavefrom                    <- DO NOT COPY THIS
  _writeData(IsDark ? 0x02 : 0x05);         // GuruSR:  Changed for setDarkBorder
  _writeCommand(0x18); // Read built-in temperature sensor  <- DO NOT COPY THIS
  _writeData(0x80);                                         <- DO NOT COPY THIS
  _setPartialRamArea(0, 0, WIDTH, HEIGHT);                  <- DO NOT COPY THIS
}

Edit GxEPD2_154_D67.h:

After:
#define _GxEPD2_154_D67_H_

Add:
#define GxEPD2DarkBorder

It should look like this:
#define _GxEPD2_154_D67_H_
#define GxEPD2DarkBorder

Further down look for:

void hibernate(); // turns powerOff() and sets controller to deep sleep for minimum power use, ONLY if wakeable by RST (rst >= 0)

Add the void setDarkBorder line below after the line above so it looks like:

void hibernate(); // turns powerOff() and sets controller to deep sleep for minimum power use, ONLY if wakeable by RST (rst >= 0)
void setDarkBorder(bool Dark);        // GuruSR:  Changed for setDarkBorder

Make a backup of these two files if you happen to update a newer version of GxEPD2.

This will allow the compilation on either Arduino or PlatformIO.
